ЗАДАНИЕ

  Дана скрытая Марковская модель:
    1. 4 состояния: B, St1, St2, E.
    2. Вероятности перехода:
       B -> St1 0.526
       B -> St2 0.474
       St1 -> E 0.002
       St1 -> St1 0.969
       St1 -> St2 0.029
       St2 -> E 0.002
       St2 -> St1 0.063
       St2 -> St2 0.935
    3. Возможна эмиссия трех символов: 'a', 'b', 'c'.
    4. Эмиссионные вероятности:
       St1:
         'a', 0.005
         'b', 0.775
         'c', 0.220
       St2:
         'a', 0.604
         'b', 0.277
         'c', 0.119
    5. Данные симуляции такой HMM приведены в файле hmmdata.

  Требуется на языке C++:
    Реализовать структуры данных для HMM.
    Реализовать алгоритм Viterbi, предсказывающий наиболее вероятную
    последовательность состояний по данным эмиссии, оценить эффективность
    алгоритма по реальным данным о состояниях (рассчитать True Positives,
    False Positives, True Negatives, False Negatives и F-меру для задачи
    детекции состояния St1).
    Реализовать алгоритм Forward-Backward, оценивающий вероятности
    состояний по данным эмиссии, оценить эффективность алгоритма по
    реальным данным о состояниях (рассчитать True Positives,
    False Positives, True Negatives, False Negatives и F-меру для задачи
    детекции состояния St1).

ОПИСАНИЕ РЕШЕНИЯ

  В качестве структуры модели, я выбрал класс со статическим набором
  параметров. Т.к. мой вариант реализации не предполагает динамическое
  формирование модели во время выполнения.

  Для реализации алгоритмов я использовал шаблонные классы, чтобы можно
  было применять их для различных моделей.

СБОРКА

  В папке с проектом выполнить:

  mkdir Release
  cd Release
  cmake ../src/
  make

ЗАПУСК

  ./hmm path-to-hmmdata
